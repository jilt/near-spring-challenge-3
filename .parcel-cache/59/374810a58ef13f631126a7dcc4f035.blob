var helpers = require("../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "State", ()=>State
);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
const State = (initialState, prefix)=>{
    var _s = $RefreshSig$();
    let updatedState;
    const getState = ()=>updatedState
    ;
    const store = /*#__PURE__*/ _react.createContext(initialState);
    const { Provider: InnerProvider  } = store;
    const updateState = (state, newState, path = '')=>{
        // console.log('updateState', state, path, newState) // debugging
        if (path.length === 0) return {
            ...state,
            ...newState
        };
        const pathArr = path.split('.');
        const first = pathArr[0];
        state = {
            ...state
        };
        if (!state[first]) state[first] = {
        };
        if (pathArr.length === 1) state[first] = !!newState && typeof newState === 'object' && !Array.isArray(newState) ? {
            ...state[first],
            ...newState
        } : newState;
        else state[first] = {
            ...state[first],
            ...updateState(state[first], newState, pathArr.slice(1).join('.'))
        };
        return state;
    };
    const Provider = ({ children  })=>{
        _s();
        const [state, dispatch] = _react.useReducer((state1, payload)=>{
            const { path , newState  } = payload;
            if (path === undefined) return state1;
            updatedState = updateState(state1, newState, path);
            return updatedState;
        }, initialState);
        const update = (path, newState)=>{
            dispatch({
                path,
                newState
            });
        };
        const wrappedDispatch = (fn)=>fn({
                update,
                getState,
                dispatch: wrappedDispatch
            })
        ;
        return(/*#__PURE__*/ _reactDefault.default.createElement(InnerProvider, {
            value: {
                update,
                state,
                dispatch: wrappedDispatch
            },
            __source: {
                fileName: "C:\\Users\\jeelt\\Documents\\GitHub\\marketplace\\NFT-Staking\\src\\utils\\state.js",
                lineNumber: 50
            },
            __self: undefined
        }, children));
    };
    _s(Provider, "6JWkGZ32UPfojeNx+xqn8ZU8A0Q=");
    if (prefix) return {
        [prefix + 'Store']: store,
        [prefix.substr(0, 1).toUpperCase() + prefix.substr(1) + 'Provider']: Provider
    };
    return {
        store,
        Provider
    };
};
_c = State;
var _c;
$RefreshReg$(_c, "State");

  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}